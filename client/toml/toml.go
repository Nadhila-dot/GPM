package toml


import (
	"bufio"
	"os"
	"strings"
)
func CreateGpmFile() string {
    if _, err := os.Stat("gpm.toml"); err == nil {
        // gpm.toml file already exists
        return "success"
    }

    file, err := os.Create("gpm.toml")
    if err != nil {
        return "failed to create gpm.toml file: " + err.Error()
    }
    defer file.Close()

    _, err = file.WriteString(`# Go Package Manager TOML
# This file is used by gpm to manage packages
# Do not edit this file manually unless you know what you are doing

[packages]
`)
    if err != nil {
        return "failed to write to gpm.toml file: " + err.Error()
    }

    return "success"
}

func TomlAdd(name, link string) string {
    const tomlFile = "gpm.toml"
    entry := name + " = \"" + link + "\"\n"

    // Read the existing file
    file, err := os.OpenFile(tomlFile, os.O_RDWR, 0644)
    if err != nil {
        return "failed to open gpm.toml: " + err.Error()
    }
    defer file.Close()

    var lines []string
    scanner := bufio.NewScanner(file)
    inPackages := false
    inserted := false

    for scanner.Scan() {
        line := scanner.Text()
        lines = append(lines, line)
        if strings.TrimSpace(line) == "[packages]" {
            inPackages = true
            continue
        }
        if inPackages {
            trimmed := strings.TrimSpace(line)
            if strings.HasPrefix(trimmed, name+" =") {
                return "Package already exists.. Has it been installed already?"
            }
            // If we reach a new section or empty line after [packages], insert if not already inserted
            if !inserted && (trimmed == "" || strings.HasPrefix(trimmed, "[")) {
                lines = append(lines[:len(lines)-1], "[packages]", entry, line)
                inserted = true
                inPackages = false
            }
        }
    }
    if !inserted && inPackages {
        lines = append(lines, entry)
    }

    if err := scanner.Err(); err != nil {
        return "failed to read gpm.toml: " + err.Error()
    }

    // Write back to the file
    err = os.WriteFile(tomlFile, []byte(strings.Join(lines, "\n")), 0644)
    if err != nil {
        return "failed to write to gpm.toml: " + err.Error()
    }

    return "success"
}

func TomlRemove(name string) string {
    const tomlFile = "gpm.toml"

    // Read the existing file
    file, err := os.OpenFile(tomlFile, os.O_RDWR, 0644)
    if err != nil {
        return "failed to open gpm.toml: " + err.Error()
    }
    defer file.Close()

    var lines []string
    scanner := bufio.NewScanner(file)
    found := false

    for scanner.Scan() {
        line := scanner.Text()
        trimmed := strings.TrimSpace(line)
        // Skip the line if it matches the package entry
        if strings.HasPrefix(trimmed, name+" =") {
            found = true
            continue
        }
        lines = append(lines, line)
    }

    if err := scanner.Err(); err != nil {
        return "failed to read gpm.toml: " + err.Error()
    }

    if !found {
        return "Package not found"
    }

    // Write back to the file
    err = os.WriteFile(tomlFile, []byte(strings.Join(lines, "\n")), 0644)
    if err != nil {
        return "failed to write to gpm.toml: " + err.Error()
    }

    return "success"
}

func CheckToml() bool {
    if _, err := os.Stat("gpm.toml"); err == nil {
        return true // gpm.toml exists
    }
    return false // gpm.toml does not exist
}
func GetPackages() map[string]string {
    packages := make(map[string]string)
    file, err := os.Open("gpm.toml")
    if err != nil {
        return packages // return empty map if file can't be opened
    }
    defer file.Close()

    scanner := bufio.NewScanner(file)
    inPackages := false

    for scanner.Scan() {
        line := strings.TrimSpace(scanner.Text())
        if line == "[packages]" {
            inPackages = true
            continue
        }
        if inPackages {
            if line == "" || strings.HasPrefix(line, "[") {
                break // end of packages section
            }
            parts := strings.SplitN(line, "=", 2)
            if len(parts) == 2 {
                name := strings.TrimSpace(parts[0])
                link := strings.Trim(strings.TrimSpace(parts[1]), "\"")
                packages[name] = link
            }
        }
    }
    return packages
}


func GetImportPath(name string) string {
    file, err := os.Open("gpm.toml")
    if err != nil {
        return ""
    }
    defer file.Close()

    scanner := bufio.NewScanner(file)
    inPackages := false

    for scanner.Scan() {
        line := strings.TrimSpace(scanner.Text())
        if line == "[packages]" {
            inPackages = true
            continue
        }
        if inPackages {
            if line == "" || strings.HasPrefix(line, "[") {
                break // end of packages section
            }
            parts := strings.SplitN(line, "=", 2)
            if len(parts) == 2 {
                pkgName := strings.TrimSpace(parts[0])
                importPath := strings.Trim(strings.TrimSpace(parts[1]), "\"")
                if pkgName == name {
                    return importPath
                }
            }
        }
    }
    return ""
}